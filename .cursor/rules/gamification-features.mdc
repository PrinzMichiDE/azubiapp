# Gamification-Features und interaktive Lern-Elemente

## Gamification-System
- **Punkte-System**: F√ºr abgeschlossene Module, Beitr√§ge und Feedback
- **Badges und Achievements**: Spezielle Auszeichnungen f√ºr Leistungen
- **Bestenlisten**: Anonymisierte Ranglisten pro Gruppe/Unternehmen
- **Level-System**: Fortschrittsbalken und Freischaltung neuer Inhalte

## Punkte-System
```typescript
// Punkte-Kategorien
export const POINT_CATEGORIES = {
  LEARNING: {
    MODULE_COMPLETION: 100,
    QUIZ_PERFECT: 50,
    QUIZ_GOOD: 30,
    QUIZ_ATTEMPT: 10,
  },
  COMMUNITY: {
    POST_CREATED: 20,
    HELPFUL_ANSWER: 30,
    PEER_FEEDBACK: 25,
    GROUP_PARTICIPATION: 15,
  },
  ACHIEVEMENTS: {
    FIRST_MODULE: 100,
    STREAK_7_DAYS: 200,
    PERFECT_SCORE: 150,
    COMMUNITY_HELPER: 300,
  },
} as const;

// Punkte-Berechnung
export function calculatePoints(action: keyof typeof POINT_CATEGORIES, subAction: string): number {
  const category = POINT_CATEGORIES[action];
  return category[subAction as keyof typeof category] || 0;
}
```

## Achievement-System
```typescript
// Achievement-Interface
interface Achievement {
  id: string;
  name: string;
  description: string;
  icon: string;
  category: 'learning' | 'community' | 'special';
  rarity: 'common' | 'rare' | 'epic' | 'legendary';
  points: number;
  requirements: AchievementRequirement[];
  unlockedAt?: Date;
}

// Achievement-Requirements
interface AchievementRequirement {
  type: 'modules_completed' | 'quiz_perfect' | 'days_streak' | 'posts_created';
  value: number;
  current: number;
}

// Achievement-Badge Komponente
export function AchievementBadge({ achievement, isUnlocked, showProgress = false }: {
  achievement: Achievement;
  isUnlocked: boolean;
  showProgress?: boolean;
}) {
  const progress = showProgress ? calculateProgress(achievement.requirements) : 0;
  
  return (
    <div className={cn(
      "relative group cursor-pointer transition-all duration-300",
      isUnlocked ? "opacity-100" : "opacity-60"
    )}>
      <Badge 
        variant={isUnlocked ? "default" : "secondary"}
        className={cn(
          "flex items-center space-x-2 px-3 py-2",
          isUnlocked && "animate-pulse"
        )}
      >
        <span className="text-lg">{achievement.icon}</span>
        <span>{achievement.name}</span>
        {isUnlocked && (
          <span className="text-xs bg-green-500 text-white px-2 py-1 rounded-full">
            +{achievement.points} Punkte
          </span>
        )}
      </Badge>
      
      {/* Tooltip mit Details */}
      <Tooltip>
        <TooltipTrigger asChild>
          <div className="absolute inset-0" />
        </TooltipTrigger>
        <TooltipContent className="max-w-xs">
          <div className="space-y-2">
            <h4 className="font-semibold">{achievement.name}</h4>
            <p className="text-sm">{achievement.description}</p>
            {showProgress && !isUnlocked && (
              <Progress value={progress} className="w-full" />
            )}
            <div className="flex items-center justify-between text-xs">
              <span className="capitalize">{achievement.rarity}</span>
              <span>{achievement.points} Punkte</span>
            </div>
          </div>
        </TooltipContent>
      </Tooltip>
    </div>
  );
}
```

## Interaktive Quizze
```typescript
// Quiz-Interface
interface QuizQuestion {
  id: string;
  type: 'multiple_choice' | 'true_false' | 'fill_blank' | 'drag_drop';
  question: string;
  options?: string[];
  correctAnswer: string | string[];
  explanation?: string;
  difficulty: 'easy' | 'medium' | 'hard';
  points: number;
}

// Interaktive Quiz-Komponente
export function InteractiveQuiz({ questions, onComplete }: {
  questions: QuizQuestion[];
  onComplete: (score: number, timeSpent: number) => void;
}) {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<Record<string, string>>({});
  const [score, setScore] = useState(0);
  const [startTime] = useState(Date.now());
  const [showResults, setShowResults] = useState(false);
  
  const currentQ = questions[currentQuestion];
  
  const handleAnswer = (answer: string) => {
    setAnswers(prev => ({ ...prev, [currentQ.id]: answer }));
    
    // Automatisch zur n√§chsten Frage oder Ergebnisse anzeigen
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(prev => prev + 1);
    } else {
      calculateFinalScore();
    }
  };
  
  const calculateFinalScore = () => {
    let totalScore = 0;
    questions.forEach(q => {
      const userAnswer = answers[q.id];
      if (userAnswer === q.correctAnswer) {
        totalScore += q.points;
      }
    });
    
    setScore(totalScore);
    setShowResults(true);
    
    const timeSpent = Date.now() - startTime;
    onComplete(totalScore, timeSpent);
  };
  
  if (showResults) {
    return (
      <QuizResults 
        score={score}
        totalQuestions={questions.length}
        totalPoints={questions.reduce((sum, q) => sum + q.points, 0)}
        timeSpent={Date.now() - startTime}
      />
    );
  }
  
  return (
    <Card className="max-w-2xl mx-auto">
      <CardHeader>
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold">Frage {currentQuestion + 1} von {questions.length}</h3>
          <Badge variant="outline">{currentQ.difficulty}</Badge>
        </div>
        <Progress value={(currentQuestion / questions.length) * 100} />
      </CardHeader>
      
      <CardContent className="space-y-6">
        <div className="text-lg">{currentQ.question}</div>
        
        {currentQ.type === 'multiple_choice' && (
          <div className="space-y-3">
            {currentQ.options?.map((option, index) => (
              <Button
                key={index}
                variant="outline"
                className="w-full justify-start h-auto p-4"
                onClick={() => handleAnswer(option)}
              >
                <span className="mr-3 text-sm font-mono bg-gray-100 px-2 py-1 rounded">
                  {String.fromCharCode(65 + index)}
                </span>
                {option}
              </Button>
            ))}
          </div>
        )}
        
        {currentQ.type === 'true_false' && (
          <div className="flex space-x-4">
            <Button 
              variant="outline" 
              className="flex-1"
              onClick={() => handleAnswer('true')}
            >
              Wahr
            </Button>
            <Button 
              variant="outline" 
              className="flex-1"
              onClick={() => handleAnswer('false')}
            >
              Falsch
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
```

## Fortschritts-Tracking
```typescript
// Fortschritts-Ring Komponente
export function ProgressRing({ progress, size = 120, strokeWidth = 8 }: {
  progress: number; // 0-100
  size?: number;
  strokeWidth?: number;
}) {
  const radius = (size - strokeWidth) / 2;
  const circumference = radius * 2 * Math.PI;
  const strokeDasharray = circumference;
  const strokeDashoffset = circumference - (progress / 100) * circumference;
  
  return (
    <div className="relative inline-block">
      <svg width={size} height={size} className="transform -rotate-90">
        {/* Hintergrund-Ring */}
        <circle
          cx={size / 2}
          cy={size / 2}
          r={radius}
          stroke="currentColor"
          strokeWidth={strokeWidth}
          fill="transparent"
          className="text-gray-200"
        />
        
        {/* Fortschritts-Ring */}
        <circle
          cx={size / 2}
          cy={size / 2}
          r={radius}
          stroke="currentColor"
          strokeWidth={strokeWidth}
          fill="transparent"
          strokeDasharray={strokeDasharray}
          strokeDashoffset={strokeDashoffset}
          className="text-primary transition-all duration-1000 ease-out"
          strokeLinecap="round"
        />
      </svg>
      
      {/* Zentrierter Text */}
      <div className="absolute inset-0 flex items-center justify-center">
        <div className="text-center">
          <div className="text-2xl font-bold">{Math.round(progress)}%</div>
          <div className="text-sm text-gray-500">Abgeschlossen</div>
        </div>
      </div>
    </div>
  );
}

// Streak-Tracker
export function StreakTracker({ currentStreak, longestStreak }: {
  currentStreak: number;
  longestStreak: number;
}) {
  return (
    <Card className="p-4">
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm text-gray-600">Aktuelle Serie</p>
          <p className="text-2xl font-bold text-orange-500">{currentStreak} Tage</p>
        </div>
        <div className="text-right">
          <p className="text-sm text-gray-600">L√§ngste Serie</p>
          <p className="text-lg font-semibold">{longestStreak} Tage</p>
        </div>
      </div>
      
      {/* Streak-Flammen */}
      <div className="flex justify-center mt-4 space-x-1">
        {Array.from({ length: Math.min(currentStreak, 7) }).map((_, i) => (
          <span key={i} className="text-2xl animate-bounce" style={{ animationDelay: `${i * 0.1}s` }}>
            üî•
          </span>
        ))}
      </div>
    </Card>
  );
}
```

## Bestenlisten und Wettbewerb
```typescript
// Bestenlisten-Komponente
export function Leaderboard({ data, type }: {
  data: LeaderboardEntry[];
  type: 'weekly' | 'monthly' | 'allTime';
}) {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center space-x-2">
          <TrophyIcon className="h-5 w-5 text-yellow-500" />
          <span>Bestenliste</span>
        </CardTitle>
        <CardDescription>
          {type === 'weekly' && 'Diese Woche'}
          {type === 'monthly' && 'Diesen Monat'}
          {type === 'allTime' && 'Gesamt'}
        </CardDescription>
      </CardHeader>
      
      <CardContent>
        <div className="space-y-3">
          {data.map((entry, index) => (
            <div key={entry.id} className="flex items-center space-x-4 p-3 rounded-lg hover:bg-gray-50">
              {/* Rang */}
              <div className={cn(
                "w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold",
                index === 0 && "bg-yellow-100 text-yellow-800",
                index === 1 && "bg-gray-100 text-gray-800",
                index === 2 && "bg-orange-100 text-orange-800",
                index > 2 && "bg-gray-100 text-gray-600"
              )}>
                {index + 1}
              </div>
              
              {/* Benutzer-Info (anonymisiert) */}
              <div className="flex-1">
                <p className="font-medium">
                  {index < 3 ? `Azubi ${entry.rank}` : 'Anonym'}
                </p>
                <p className="text-sm text-gray-500">
                  {entry.points} Punkte ‚Ä¢ {entry.modulesCompleted} Module
                </p>
              </div>
              
              {/* Badges */}
              <div className="flex space-x-1">
                {entry.achievements.slice(0, 3).map(achievement => (
                  <Badge key={achievement.id} variant="secondary" className="text-xs">
                    {achievement.icon}
                  </Badge>
                ))}
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}
```
description:
globs:
alwaysApply: true
---
