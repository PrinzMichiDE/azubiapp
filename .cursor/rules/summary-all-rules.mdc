---
alwaysApply: true
description: "Zusammenfassung aller Cursor Rules f√ºr das Azubi-App Projekt"
---

# üìã Azubi App - Vollst√§ndige Cursor Rules Zusammenfassung

## üéØ **Projektkontext**
Die Azubi App ist eine moderne Projektmanagement-Plattform mit Next.js 15, TypeScript, Prisma und PostgreSQL. Alle Entwicklungsstandards zielen auf h√∂chste Code-Qualit√§t, Sicherheit und Wartbarkeit ab.

## üèóÔ∏è **Architektur & Struktur**

### **Frontend Architecture** ([component-architecture.mdc](mdc:component-architecture.mdc))
- **Next.js 15** mit App Router Pattern
- **React 19** mit TypeScript f√ºr Type Safety
- **Modulare Komponentenstruktur** in `src/components/`
- **Server/Client Components** korrekt trennen
- **Custom Hooks** f√ºr wiederverwendbare Logik

### **Backend Architecture** ([backend-architecture.mdc](mdc:backend-architecture.mdc))
- **API Routes** in `src/app/api/` Organisation
- **Prisma ORM** f√ºr Datenbankzugriff
- **JWT Authentication** mit bcryptjs
- **Zod Schema Validation** f√ºr alle API Endpoints

### **Database Schema** ([database-schema.mdc](mdc:database-schema.mdc))
- **PostgreSQL** als Hauptdatenbank
- **Prisma Schema** in `prisma/schema.prisma`
- **Relationale Datenmodelle** f√ºr User, Projects, Tasks, TimeEntries
- **Rollen-basierte Zugriffskontrolle** (ADMIN, MANAGER, USER, TRAINEE)

## üîê **Sicherheit & Authentifizierung**

### **Authentication System** ([authentication-system.mdc](mdc:authentication-system.mdc))
- **JWT-basierte Authentifizierung** mit sicherer Token-Generierung
- **Role-based Access Control** f√ºr alle gesch√ºtzten Routen
- **Sichere Passwort-Hashing** mit bcrypt (12 Salt Rounds)
- **Session Management** mit localStorage und Token-Refresh

### **Security Concept** ([security-concept.mdc](mdc:security-concept.mdc))
- **Input Validation** mit Zod Schemas
- **Rate Limiting** f√ºr API Endpoints
- **CORS Configuration** f√ºr sichere API-Zugriffe
- **Environment Variables** f√ºr sensible Daten

### **Auth Environment Config** ([auth-environment-config.mdc](mdc:auth-environment-config.mdc))
- **NEXTAUTH_URL** immer aus process.env verwenden
- **Keine hardcodierten URLs** oder window.location.origin
- **Sichere JWT Secret Konfiguration**

## üåê **API & Datenmanagement**

### **API Standards** ([api-standards.mdc](mdc:api-standards.mdc))
- **RESTful API Design** mit konsistenten Endpoints
- **Standardisierte Response Formate** mit TypeScript Interfaces
- **Error Handling** mit strukturierten Fehlermeldungen
- **API Versioning** f√ºr Zukunftssicherheit

### **API Endpoints** ([api-endpoints.mdc](mdc:api-endpoints.mdc))
- **GET /v1/worktime/my/projects** f√ºr Projekt-Abruf (bevorzugt)
- **Konsistente URL-Struktur** f√ºr alle Endpoints
- **Typisierte Request/Response** mit Zod Validation

### **Data Fetching** ([data-fetching.mdc](mdc:data-fetching.mdc))
- **@tanstack/react-query** f√ºr Server State Management
- **Axios** als HTTP-Client mit Interceptors
- **Error Boundaries** f√ºr robuste Fehlerbehandlung
- **Optimistic Updates** f√ºr bessere UX

## üé® **Frontend & UI/UX**

### **Frontend UI/UX** ([frontend-ui-ux.mdc](mdc:frontend-ui-ux.mdc))
- **Tailwind CSS v3** f√ºr konsistentes Styling
- **Responsive Design** f√ºr alle Ger√§tegr√∂√üen
- **Moderne UI-Komponenten** mit class-variance-authority
- **Accessibility Standards** (WCAG-konform)

### **UI Components** ([ui-components.mdc](mdc:ui-components.mdc))
- **Wiederverwendbare Komponenten** in `src/components/ui/`
- **TypeScript Props Interfaces** f√ºr alle Komponenten
- **Consistent Styling** mit Tailwind Utilities
- **Component Variants** mit CVA (Class Variance Authority)

### **Accessibility WCAG Compliance** ([accessibility-wcag-compliance.mdc](mdc:accessibility-wcag-compliance.mdc))
- **WCAG 2.1 AA Standards** einhalten
- **Semantic HTML** f√ºr Screen Reader
- **Keyboard Navigation** f√ºr alle Interaktionen
- **Color Contrast** Requirements

## üåç **Internationalisierung**

### **Internationalization i18n** ([internationalization-i18n.mdc](mdc:internationalization-i18n.mdc))
- **next-intl** f√ºr Deutsch/Englisch Support
- **Messages** in `messages/de.json` und `messages/en.json`
- **Locale-basierte Routing** mit `[locale]` Parameter
- **Typisierte √úbersetzungen** mit TypeScript

## üìã **Entwicklungsstandards**

### **Development Standards** ([development-standards.mdc](mdc:development-standards.mdc))
- **TypeScript Strict Mode** f√ºr maximale Type Safety
- **ESLint + Prettier** f√ºr Code Consistency
- **Kommentare in Deutsch/Englisch** f√ºr automatische Dokumentation
- **npm-check-updates** f√ºr aktuelle Dependencies

### **Testing Standards** ([testing-standards.mdc](mdc:testing-standards.mdc))
- **Unit Tests** f√ºr kritische Funktionen
- **Integration Tests** f√ºr API Endpoints
- **E2E Tests** f√ºr User Journeys
- **Type Checking** mit TypeScript Compiler

### **Git Workflow** ([git-workflow.mdc](mdc:git-workflow.mdc))
- **Feature Branches** f√ºr neue Entwicklungen
- **Conventional Commits** f√ºr klare Commit Messages
- **Pull Request Reviews** vor Merge
- **Automated CI/CD** Pipeline

## üöÄ **Deployment & DevOps**

### **Docker Deployment** ([docker-deployment.mdc](mdc:docker-deployment.mdc))
- **Multi-stage Docker Builds** f√ºr Optimierung
- **Docker Compose** f√ºr lokale Entwicklung
- **Environment-spezifische Konfiguration**
- **Health Checks** f√ºr Container Monitoring

### **Deployment DevOps** ([deployment-devops.mdc](mdc:deployment-devops.mdc))
- **Vercel Deployment** f√ºr Frontend
- **Database Migration** mit Prisma
- **Environment Variables** Management
- **Monitoring & Logging** Setup

### **Vercel Analytics Speed Insights** ([vercel-analytics-speed-insights.mdc](mdc:vercel-analytics-speed-insights.mdc))
- **@vercel/analytics** f√ºr User Analytics
- **@vercel/speed-insights** f√ºr Performance Monitoring
- **Privacy-compliant** Tracking
- **Performance Optimization** basierend auf Insights

## üõ†Ô∏è **Spezielle Features**

### **Admin Features** ([admin-features.mdc](mdc:admin-features.mdc))
- **Admin Dashboard** f√ºr Systemverwaltung
- **User Management** mit Rollenverwaltung
- **System Statistics** und Monitoring
- **Bulk Operations** f√ºr Administratoren

### **AI Integration** ([ai-integration.mdc](mdc:ai-integration.mdc))
- **AI-powered Features** f√ºr intelligente Automatisierung
- **Machine Learning** Algorithmen f√ºr Empfehlungen
- **Natural Language Processing** f√ºr Aufgabenerstellung
- **Predictive Analytics** f√ºr Projektplanung

### **Gamification Features** ([gamification-features.mdc](mdc:gamification-features.mdc))
- **Achievement System** f√ºr Motivation
- **Progress Tracking** mit Badges
- **Leaderboards** f√ºr Team Competition
- **XP Points** f√ºr abgeschlossene Aufgaben

### **Learning Features** ([learning-features.mdc](mdc:learning-features.mdc))
- **Skill Tracking** f√ºr Azubi-Entwicklung
- **Learning Paths** mit strukturierten Kursen
- **Knowledge Base** mit Tutorials
- **Progress Assessment** und Zertifizierungen

### **PWA Offline Functionality** ([pwa-offline-functionality.mdc](mdc:pwa-offline-functionality.mdc))
- **Service Worker** f√ºr Offline-Funktionalit√§t
- **App Manifest** f√ºr Installation
- **Offline Data Sync** bei Reconnection
- **Push Notifications** f√ºr Updates

## üìä **Storage & Integration**

### **MinIO Integration Storage** ([minio-integration-storage.mdc](mdc:minio-integration-storage.mdc))
- **File Upload API** mit MinIO Backend
- **Secure File Handling** mit Bucket Policies
- **Image Optimization** f√ºr Web Delivery
- **File Type Validation** und Size Limits

### **Docker Monitoring** ([docker-monitoring.mdc](mdc:docker-monitoring.mdc))
- **Redis nicht zug√§nglich** - Alternative Monitoring verwenden
- **Container Health Checks** implementieren
- **Log Aggregation** f√ºr Debugging
- **Performance Metrics** sammeln

## üìù **Dokumentation**

### **Automatic Documentation** ([automatic-documentation.mdc](mdc:automatic-documentation.mdc))
- **JSDoc Comments** in Deutsch/Englisch
- **API Documentation** automatisch generiert
- **Component Documentation** mit Storybook
- **README Updates** bei Feature Changes

### **API Documentation Developer Experience** ([api-documentation-developer-experience.mdc](mdc:api-documentation-developer-experience.mdc))
- **OpenAPI Specs** f√ºr alle Endpoints
- **Interactive API Explorer** f√ºr Testing
- **Code Examples** in multiple Sprachen
- **SDK Generation** f√ºr verschiedene Plattformen

## ‚öôÔ∏è **Wichtige Erinnerungen**

1. **Immer neueste npm-Versionen** verwenden [[memory:6728985]]
2. **process.env.NEXTAUTH_URL** statt hardcodierte URLs [[memory:6728992]]
3. **GET /v1/worktime/my/projects** f√ºr Projekt-Abruf [[memory:6728987]]
4. **Keine reCAPTCHA** - interne L√∂sungen bevorzugen [[memory:6728989]]
5. **Einfache Formatierung** f√ºr Listen [[memory:6728990]]

## üéØ **Code-Qualit√§ts-Prinzipien**

- **Security First** - Sicherheit hat oberste Priorit√§t
- **Wiederverwendbarkeit** - DRY-Prinzip anwenden
- **Wartbarkeit** - Clean Code Standards
- **Performance** - Optimiert f√ºr Geschwindigkeit
- **Accessibility** - Barrierefrei f√ºr alle User
- **Type Safety** - Vollst√§ndige TypeScript Typisierung